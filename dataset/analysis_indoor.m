%% analysis_indoor.m
% Simple analysis script for Indoor scenario channels generated by QuaDRiGa.
% It looks for indoor_*.mat files in the 'outputs' folder and produces:
%   1) A histogram of channel magnitudes (linear scale).
%   2) A histogram of channel gains (dB scale = 20*log10(magnitude)).

clear all;
close all;
clc;

% Create an output directory for figures (optional)
if ~exist('figures_indoor', 'dir')
    mkdir('figures_indoor');
end

%% Find and load Indoor .mat files
files = dir('outputs/indoor_*.mat');
fprintf('Found %d Indoor dataset files:\n', length(files));

% Keep track of time-averaged data for each config
channel_stats = struct();
configs = {};

for i = 1:length(files)
    % Load each file
    filename = fullfile(files(i).folder, files(i).name);
    fprintf('Loading %s...\n', files(i).name);
    data = load(filename);
    
    % Extract a short config name
    [~, baseName, ~] = fileparts(files(i).name);
    parts = split(baseName, '_');
    
    % For filenames like "indoor_standard_conf_..."
    if length(parts) >= 3 && strcmp(parts{3}, 'conf')
        config_name = parts{2};  
    elseif length(parts) >= 2
        config_name = parts{2};
    else
        config_name = ['config_', num2str(i)];
    end
    configs{end+1} = config_name;
    
    fprintf('  Configuration: %s\n', config_name);
    fprintf('  Channel matrix dimensions: [%s]\n', ...
        strjoin(string(size(data.channel_matrix)), ', '));
    
    % Time-average for a single resource block (middle of the band)
    middle_rb = ceil(size(data.channel_matrix, 3) / 2);
    time_averaged = squeeze(mean(data.channel_matrix(:,:,middle_rb,:,:), 1));
    
    % Store in a structure for plotting
    channel_stats.(config_name).time_averaged = time_averaged;
end

%% Plot 1: Channel Magnitude (linear scale)
figure('Position', [100, 100, 900, 500]);
hold on;

config_names = fieldnames(channel_stats);
num_configs = length(config_names);
cmap = lines(num_configs);  % or parula(num_configs), etc.

for i = 1:num_configs
    config = config_names{i};
    % Extract time-averaged data
    magnitudes = abs(channel_stats.(config).time_averaged);
    
    % Flatten to a 1D array of magnitudes
    magnitudes_linear = magnitudes(:);
    
    % Plot histogram (linear scale)
    histogram(magnitudes_linear, 50, 'Normalization', 'probability', ...
        'DisplayName', config, 'FaceAlpha', 0.6, 'EdgeAlpha', 0.3, ...
        'FaceColor', cmap(i,:));
end

xlabel('Channel Magnitude (linear)');
ylabel('Probability');
title('Indoor: Distribution of Channel Magnitudes (linear scale)');
legend('Location','best');
grid on;

saveas(gcf, fullfile('figures_indoor', 'indoor_channel_magnitude_hist.png'));

%% Plot 2: Channel Gain (dB)
figure('Position', [120, 120, 900, 500]);
hold on;

for i = 1:num_configs
    config = config_names{i};
    magnitudes = abs(channel_stats.(config).time_averaged);
    
    % Convert to dB
    gains_db = 20 * log10(magnitudes(:) + eps); % add eps to avoid log(0)
    
    histogram(gains_db, 50, 'Normalization', 'probability', ...
        'DisplayName', config, 'FaceAlpha', 0.6, 'EdgeAlpha', 0.3, ...
        'FaceColor', cmap(i,:));
end

xlabel('Channel Gain (dB)');
ylabel('Probability');
title('Indoor: Distribution of Channel Gains (dB scale)');
legend('Location','best');
grid on;

saveas(gcf, fullfile('figures_indoor', 'indoor_channel_gain_hist.png'));

fprintf('\nAnalysis complete. Two figures saved in "figures_indoor" folder.\n');
