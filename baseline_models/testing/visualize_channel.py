import h5py
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
import argparse

def load_and_visualize_channel(filename, ue_idx=0, time_idx=0, rx_idx=0):
    """
    Load a MATLAB h5py channel matrix file and visualize the subcarriers vs transmit antennas.
    
    Parameters:
    - filename: Path to the .mat file generated by generate_umi.m
    - ue_idx: User equipment index to visualize (default: 0)
    - time_idx: Time sample index to visualize (default: 0)
    - rx_idx: Receive antenna index to visualize (default: 0)
    """
    # Load the .mat file
    print(f"Loading file: {filename}")
    try:
        with h5py.File(filename, 'r') as f:
            # In h5py, MATLAB matrices are transposed
            # Original shape: [500, 2, 18, 8, 256]
            channel_matrix = f['channel_matrix'][:]
            
            # Check the actual shape
            print(f"Loaded channel matrix shape: {channel_matrix.shape}")
            
            # We need to handle potential transposition and dimension reordering
            # Check the dimensions to make sure we understand the structure
            if len(channel_matrix.shape) == 5:
                if channel_matrix.shape[4] == 256 or channel_matrix.shape[4] == 100:  # UE dimension
                    # Properly oriented: [time, rx, rb, tx, ue]
                    pass
                else:
                    # May need to transpose or reorder dimensions
                    # This depends on how MATLAB saved the matrix
                    print("Warning: Unexpected dimension sizes. Attempting to reorder...")
                    # Try to identify dimensions based on expected sizes
                    for i, dim in enumerate(channel_matrix.shape):
                        print(f"Dimension {i}: {dim}")
    except Exception as e:
        print(f"Error loading file: {e}")
        return

    # Extract a slice for visualization: one time, one rx antenna, one UE
    try:
        # Ensure indices are within bounds
        max_time = channel_matrix.shape[0] - 1
        max_rx = channel_matrix.shape[1] - 1
        max_ue = channel_matrix.shape[4] - 1
        
        time_idx = min(time_idx, max_time)
        rx_idx = min(rx_idx, max_rx)
        ue_idx = min(ue_idx, max_ue)
        
        # Extract the 18x8 slice (subcarriers x tx_antennas)
        channel_slice = channel_matrix[time_idx, rx_idx, :, :, ue_idx]
        
        # Verify the slice shape
        print(f"Channel slice shape: {channel_slice.shape}")
        
        # Complex data visualization
        visualize_complex_channel(channel_slice, ue_idx, time_idx, rx_idx)
        
    except Exception as e:
        print(f"Error extracting slice: {e}")
        return

def visualize_complex_channel(channel_slice, ue_idx, time_idx, rx_idx):
    """
    Visualize a complex channel matrix as RGB image.
    - Red: Magnitude (signal strength)
    - Green: Phase (signal phase)
    - Blue: Real part normalized
    """
    # Get magnitude, phase, and real part
    magnitude = np.abs(channel_slice)
    phase = np.angle(channel_slice)
    real_part = np.real(channel_slice)
    
    # Normalize for visualization
    norm_magnitude = Normalize()(magnitude)
    norm_phase = Normalize(vmin=-np.pi, vmax=np.pi)(phase)
    norm_real = Normalize()(real_part)
    
    # Create RGB image from complex data
    rgb_image = np.stack([norm_magnitude, norm_phase, norm_real], axis=2)
    
    # Create subplots to show different aspects of the channel
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Full RGB visualization
    axes[0, 0].imshow(rgb_image)
    axes[0, 0].set_title('Channel Matrix (RGB Composite)')
    axes[0, 0].set_xlabel('Transmit Antennas')
    axes[0, 0].set_ylabel('Subcarriers (RBs)')
    
    # Magnitude (signal strength)
    mag_plot = axes[0, 1].imshow(magnitude, cmap='viridis')
    axes[0, 1].set_title('Magnitude (Signal Strength)')
    axes[0, 1].set_xlabel('Transmit Antennas')
    axes[0, 1].set_ylabel('Subcarriers (RBs)')
    plt.colorbar(mag_plot, ax=axes[0, 1])
    
    # Phase
    phase_plot = axes[1, 0].imshow(phase, cmap='hsv')
    axes[1, 0].set_title('Phase')
    axes[1, 0].set_xlabel('Transmit Antennas')
    axes[1, 0].set_ylabel('Subcarriers (RBs)')
    plt.colorbar(phase_plot, ax=axes[1, 0])
    
    # Real part
    real_plot = axes[1, 1].imshow(real_part, cmap='coolwarm')
    axes[1, 1].set_title('Real Part')
    axes[1, 1].set_xlabel('Transmit Antennas')
    axes[1, 1].set_ylabel('Subcarriers (RBs)')
    plt.colorbar(real_plot, ax=axes[1, 1])
    
    plt.suptitle(f"Channel Visualization: UE={ue_idx}, Time={time_idx}, RX={rx_idx}")
    plt.tight_layout()
    
    # Save the figure
    plt.savefig(f"channel_visualization_ue{ue_idx}_time{time_idx}_rx{rx_idx}.png", dpi=300)
    print(f"Saved visualization to channel_visualization_ue{ue_idx}_time{time_idx}_rx{rx_idx}.png")
    
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Visualize wireless channel matrices')
    parser.add_argument('filename', help='Path to .mat file containing channel matrix')
    parser.add_argument('--ue', type=int, default=0, help='User equipment index to visualize')
    parser.add_argument('--time', type=int, default=0, help='Time sample index to visualize')
    parser.add_argument('--rx', type=int, default=0, help='Receive antenna index to visualize')
    
    args = parser.parse_args()
    
    load_and_visualize_channel(args.filename, args.ue, args.time, args.rx)